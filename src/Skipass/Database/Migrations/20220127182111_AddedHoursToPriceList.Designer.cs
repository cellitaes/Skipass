// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Skipass.Database;

#nullable disable

namespace Skipass.Database
{
    [DbContext(typeof(SkipassDbContext))]
    [Migration("20220127182111_AddedHoursToPriceList")]
    partial class AddedHoursToPriceList
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("skipass")
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "skipass");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "skipass");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "skipass");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "skipass");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "skipass");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "skipass");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "skipass");
                });

            modelBuilder.Entity("Skipass.Domain.Card", b =>
                {
                    b.Property<string>("Identifier")
                        .HasColumnType("text");

                    b.Property<int>("PassagesLeft")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Identifier");

                    b.ToTable("Cards", "skipass");

                    b.HasData(
                        new
                        {
                            Identifier = "921212",
                            PassagesLeft = 2,
                            ValidTo = new DateTime(2022, 1, 27, 18, 21, 11, 640, DateTimeKind.Utc).AddTicks(3082)
                        },
                        new
                        {
                            Identifier = "792922",
                            PassagesLeft = 15,
                            ValidTo = new DateTime(2022, 1, 27, 18, 21, 11, 640, DateTimeKind.Utc).AddTicks(3100)
                        },
                        new
                        {
                            Identifier = "533333",
                            PassagesLeft = 0,
                            ValidTo = new DateTime(2022, 1, 27, 18, 36, 11, 640, DateTimeKind.Utc).AddTicks(3102)
                        });
                });

            modelBuilder.Entity("Skipass.Domain.Company", b =>
                {
                    b.Property<int>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Identifier"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Identifier");

                    b.ToTable("Companies", "skipass");

                    b.HasData(
                        new
                        {
                            Identifier = 1,
                            Name = "Mountain Resort Hotel"
                        },
                        new
                        {
                            Identifier = 2,
                            Name = "Powder Lodge"
                        },
                        new
                        {
                            Identifier = 3,
                            Name = "Ski Refuge"
                        },
                        new
                        {
                            Identifier = 4,
                            Name = "The Elite Ski"
                        });
                });

            modelBuilder.Entity("Skipass.Domain.Gate", b =>
                {
                    b.Property<string>("Identifier")
                        .HasColumnType("text");

                    b.Property<int>("OwnerIdentifier")
                        .HasColumnType("integer");

                    b.HasKey("Identifier");

                    b.HasIndex("OwnerIdentifier");

                    b.ToTable("Gates", "skipass");

                    b.HasData(
                        new
                        {
                            Identifier = "T1234",
                            OwnerIdentifier = 1
                        },
                        new
                        {
                            Identifier = "T9999",
                            OwnerIdentifier = 2
                        });
                });

            modelBuilder.Entity("Skipass.Domain.Passage", b =>
                {
                    b.Property<int>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Identifier"));

                    b.Property<string>("CardIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GateIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Identifier");

                    b.HasIndex("CardIdentifier");

                    b.HasIndex("GateIdentifier");

                    b.ToTable("Passages", "skipass");
                });

            modelBuilder.Entity("Skipass.Domain.Payment", b =>
                {
                    b.Property<string>("Identifier")
                        .HasColumnType("text");

                    b.Property<string>("CardIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PassagesAdded")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan?>("TimeAdded")
                        .HasColumnType("interval");

                    b.HasKey("Identifier");

                    b.HasIndex("CardIdentifier");

                    b.ToTable("Payments", "skipass");
                });

            modelBuilder.Entity("Skipass.Domain.PriceListItem", b =>
                {
                    b.Property<int>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Identifier"));

                    b.Property<int>("Hours")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Identifier");

                    b.ToTable("PriceListItems", "skipass");

                    b.HasData(
                        new
                        {
                            Identifier = 1,
                            Hours = 2,
                            Name = "2h",
                            Price = 20.0
                        },
                        new
                        {
                            Identifier = 2,
                            Hours = 3,
                            Name = "3h",
                            Price = 40.0
                        },
                        new
                        {
                            Identifier = 3,
                            Hours = 4,
                            Name = "4h",
                            Price = 60.0
                        },
                        new
                        {
                            Identifier = 4,
                            Hours = 24,
                            Name = "1d",
                            Price = 80.0
                        },
                        new
                        {
                            Identifier = 5,
                            Hours = 48,
                            Name = "2d",
                            Price = 100.0
                        },
                        new
                        {
                            Identifier = 6,
                            Hours = 72,
                            Name = "3d",
                            Price = 120.0
                        },
                        new
                        {
                            Identifier = 7,
                            Hours = 96,
                            Name = "4d",
                            Price = 140.0
                        },
                        new
                        {
                            Identifier = 8,
                            Hours = 120,
                            Name = "5d",
                            Price = 160.0
                        },
                        new
                        {
                            Identifier = 9,
                            Hours = 144,
                            Name = "6d",
                            Price = 180.0
                        },
                        new
                        {
                            Identifier = 10,
                            Hours = 168,
                            Name = "7d",
                            Price = 200.0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Skipass.Domain.Gate", b =>
                {
                    b.HasOne("Skipass.Domain.Company", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Skipass.Domain.Passage", b =>
                {
                    b.HasOne("Skipass.Domain.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Skipass.Domain.Gate", "Gate")
                        .WithMany()
                        .HasForeignKey("GateIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Gate");
                });

            modelBuilder.Entity("Skipass.Domain.Payment", b =>
                {
                    b.HasOne("Skipass.Domain.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });
#pragma warning restore 612, 618
        }
    }
}
